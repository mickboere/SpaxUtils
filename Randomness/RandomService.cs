using System;

namespace SpaxUtils
{
	/// <summary>
	/// Service managing root randomness of the application.
	/// </summary>
	/// Plan:
	/// 1. User creates profile.
	/// 2. Root seed is generated from profile name.
	/// 3. World-Entities will need to have their ID's generated from some local seed.
	/// 4. Instantiated Entity ID's will be random GUID's.
	public class RandomService : IService, IDisposable
	{
		public const string ID_ROOT_SEED = "ROOT_SEED";

		/// <summary>
		/// The seed which roots all other randomness, generated from the current loaded profile name.
		/// </summary>
		public int RootSeed { get; private set; }

		private RuntimeDataService runtimeDataService;

		public RandomService(RuntimeDataService runtimeDataService)
		{
			this.runtimeDataService = runtimeDataService;
			OnCurrentDataProfileChangedEvent(runtimeDataService.CurrentProfile);
			runtimeDataService.CurrentProfileChangedEvent += OnCurrentDataProfileChangedEvent;
		}

		public void Dispose()
		{
			runtimeDataService.CurrentProfileChangedEvent -= OnCurrentDataProfileChangedEvent;
		}

		/// <summary>
		/// Static method that generates a deterministic seed from <paramref name="from"/>.
		/// If <paramref name="from"/> is null a random seed will be generated by hashing a <see cref="Guid"/>.
		/// </summary>
		/// <param name="from">The string to hash into a seed. Leave null to generate random seed.</param>
		/// <returns>A seed generated by hashing <paramref name="from"/>, random if <paramref name="from"/> is null.</returns>
		public static int GenerateSeed(string from = null)
		{
			if (from == null)
			{
				from = Guid.NewGuid().ToString();
			}

			return from.GetDeterministicHashCode();
		}

		private void OnCurrentDataProfileChangedEvent(RuntimeDataCollection profile)
		{
			if (profile.ContainsEntry(ID_ROOT_SEED))
			{
				// Load the root seed of this profile.
				// Everything is deterministic so values won't randomly change between sessions,
				// but in case we want to allow renaming profiles in the future, this should prevent issues.
				RootSeed = profile.GetValue<int>(ID_ROOT_SEED);
			}
			else
			{
				// Generate new root seed from profile ID.
				RootSeed = profile.ID.GetDeterministicHashCode();
				profile.SetValue(ID_ROOT_SEED, RootSeed);
			}
		}
	}
}
